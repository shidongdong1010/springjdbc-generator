<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- 加载属性文件 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:dataSource.properties</value>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"></property>
    </bean>

    <!-- 开启注解 -->
    <context:annotation-config/>
    <context:component-scan base-package="org.dd.*"/>
    <!-- 自动注入 -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

    <!-- 数据源定义 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${druid.driverClassName}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}"/>
    </bean>


    <!-- spring jdbc -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>


    <!-- 注册数据库类型 -->
    <bean class="org.dd.mapper.MySqlDb" />

    <!-- velocity -->
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">file</prop>
                <prop key="file.resource.loader.path">.</prop>
                <prop key="file.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
                </prop>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
            </props>
        </property>
    </bean>

    <bean id="templateService" class="org.dd.util.TemplateService">
        <property name="velocityEngine" ref="velocityEngine" />
    </bean>

    <bean id="dao" class="org.dd.dao.DaoMysqlImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>

    <!-- 生成Model -->
    <bean id="generatorModel" class="org.dd.GeneratorModel">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成Mapper -->
    <bean id="generatorMapper" class="org.dd.GeneratorMapper">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成Do -->
    <bean id="generatorDo" class="org.dd.GeneratorDTO">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成Convert -->
    <bean id="generatorConvert" class="org.dd.GeneratorConvert">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>


    <!-- 生成Dao -->
    <bean id="generatorDao" class="org.dd.GeneratorDao">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成Service -->
    <bean id="generatorService" class="org.dd.GeneratorService">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成Enum -->
    <bean id="generatorEnum" class="org.dd.GeneratorEnum">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>

    <!-- 生成ResultCode -->
    <bean id="generatorResultCode" class="org.dd.GeneratorResultCode">
        <property name="templateService" ref="templateService"/>
        <property name="dao" ref="dao" />
    </bean>
</beans>